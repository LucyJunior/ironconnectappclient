 //take the userid to make a get request ffrom the backend and we need the token for the request
 import config from '../../config'
 
 export const read = (Id, token) => {

    return fetch(`${config.REACT_APP_API_URL}/api/user/${Id}`, {
        method: "GET",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            //a cryptic string, generated by the server in response to a login request.
            //used mainly for documentation purposes, as a hint to the clients
            Authorization: `Bearer ${token}`
        }
    })
    //response of the fetch
    .then(res => {
        return res.json()

    })
    .catch(err => console.log(err));
};

export const update = (Id, token, user) => {

    return fetch(`${config.REACT_APP_API_URL}/api/user/${Id}`, {
        method: "PUT",
        headers: {
            Accept: "application/json",
            //a cryptic string, generated by the server in response to a login request.
            //used mainly for documentation purposes, as a hint to the clients
            Authorization: `Bearer ${token}`
        }, 
        body: user
    })
    //response of the fetch
    .then(res => {
        return res.json();

    })
    .catch(err => console.log(err));
};


 
 export const remove = (Id, token) => {

    return fetch(`${config.REACT_APP_API_URL}/api/user/${Id}`, {
        method: "DELETE",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
        }
    })
 
    .then(res => {
        return res.json();

    })
    .catch(err => console.log(err));
};

export const list = () => {

    return fetch(`${config.REACT_APP_API_URL}/api/users`, {
        method: "GET",
    })
    //response of the fetch
    .then(res => {
        return res.json()

    })
    .catch(err => console.log(err));
};

export const updateUser = (user, next) => {
    if (typeof window !== "undefined") {
        if (localStorage.getItem("jwt")) {
            let auth = JSON.parse(localStorage.getItem("jwt"));
            auth.user = user;
            localStorage.setItem("jwt", JSON.stringify(auth));
            next();
        }
    }
};

export const follow = (Id, token, followId) => {
    console.log(Id, followId )
    if (!followId) {
        return {
            err: 'Please send FollowID '
        }
    }
    return fetch(`${config.REACT_APP_API_URL}/api/user/follow`, {
        method: "PUT",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
        }, 
        body: JSON.stringify({Id, followId})
    })
    .then(res => {
        return res.json()

    })
    .catch(err => console.log(err));
};

export const unfollow = (Id, token, unfollowId) => {
    console.log('Unfollow',Id, unfollowId)
    return fetch(`${config.REACT_APP_API_URL}/api/user/unfollow`, {
        method: "PUT",
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
        }, 
        body: JSON.stringify({Id, unfollowId})
    })
    .then(res => {
        return res.json()

    })
    .catch(err => console.log(err));
};

